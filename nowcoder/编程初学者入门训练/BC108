/**
 * 
 */
package com.nowcoder.bc;

import java.util.LinkedList;
import java.util.Scanner;

/**
 * @author 15159
 *题目描述
KiKi有一个矩阵，他想知道经过k次行变换或列变换后得到的矩阵。请编程帮他解答。

输入描述:
第一行包含两个整数n和m，表示一个矩阵包含n行m列，用空格分隔。 (1≤n≤10,1≤m≤10)

从2到n+1行，每行输入m个整数（范围-231~231-1），用空格分隔，共输入n*m个数，表示第一个矩阵中的元素。
接下来一行输入k，表示要执行k次操作（1≤k≤5）。接下来有k行，每行包括一个字符t和两个数a和b，中间用空格格分隔，t代表需要执行的操作，
当t为字符'r'时代表进行行变换，当t为字符'c'时代表进行列变换，a和b为需要互换的行或列（1≤a≤b≤n≤10，1≤a≤b≤m≤10）。

输出描述:
输出n行m列，为矩阵交换后的结果。每个数后面有一个空格。
示例1
输入
2 2

1 2
3 4

1
r 1 2
输出
3 4 
1 2 
 */
public class Bc108 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
//		Scanner sc = new Scanner(System.in);
//
//		while(sc.hasNext()) {
//			
//			int a,b;
//			int k=0;
//			String t;
//			int row = sc.nextInt();
//			int col = sc.nextInt();
//			int[][] arr = new int[row][col];
//			
//			for(int i=0;i<row;i++) {
//				for(int j=0;j<col;j++) {
//					arr[i][j]=sc.nextInt();
//				}
//			}
//			
//			
//			k = sc.nextInt();
//			while(k-->0) {
//				t = sc.next();
//				a=sc.nextInt()-1;
//				b=sc.nextInt()-1;
//				
//				if(t.equals("r")) {//行变化
//					for(int j=0;j<col;j++) {
//						int tmp = arr[a][j];
//						arr[a][j]=arr[b][j];
//						arr[b][j]=tmp;
//					}
//				}
//				else if(t.equals("c")) {//列变化
//					for(int i=0;i<row;i++) {
//						int temp = arr[i][a];
//						arr[i][a]=arr[i][b];
//						arr[i][b]=temp;
//					}
//				}
//				
//				for(int i=0;i<row;i++) {
//					for(int j=0;j<col;j++) {
//						System.out.print(arr[i][j]+" ");
//					}
//					System.out.println("");
//				}
//			}
//			
//			
//		}
		

		        class ope{
		            String t;
		            int a;
		            int b;
		 
		            public ope(String t, int a, int b) {
		                this.t = t;
		                this.a = a;
		                this.b = b;
		            }
		        }
		 
		        Scanner sc = new Scanner(System.in);
		        int a = sc.nextInt();
		        int b = sc.nextInt();
		        int[][] rec = new int[a][b];
		        int k;
		 
		        for (int i = 0; i < a; i++) {
		            for (int j = 0; j < b; j++) {
		                rec[i][j] = sc.nextInt();
		            }
		        }
		 
		        k = sc.nextInt();
		        LinkedList<ope> opes = new LinkedList<>();
		 
		        for (int i = 0; i < k; i++) {
		            opes.add(new ope(sc.next(),sc.nextInt(),sc.nextInt()));
		        }
		 
		        for (ope ope : opes) {
		            if (ope.t.equals("r")){
		                int temp;
		                for (int i = 0; i < b; i++) {
		                    temp = rec[ope.a-1][i];
		                    rec[ope.a-1][i] = rec[ope.b-1][i];
		                    rec[ope.b-1][i] = temp;
		                }
		            }
		            if (ope.t.equals("c")){
		                int temp;
		                for (int i = 0; i < a; i++) {
		                    temp = rec[i][ope.a-1];
		                    rec[i][ope.a-1] = rec[i][ope.b-1];
		                    rec[i][ope.b-1] = temp;
		                }
		            }
		        }
		 
		        for (int i = 0; i < a; i++) {
		            for (int j = 0; j < b; j++) {
		                System.out.print(rec[i][j]+" ");
		            }
		            System.out.println();
		        }
		 

	}

}
