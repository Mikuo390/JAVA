/**
 * 
 */
package com.nowcoder.bc;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * @author 15159
 *题目描述
小乐乐从老师口中听到了二段数这个名词，想更深入的了解二段数。

二段数是这样的正整数：恰好包含两种不同的十进制数字s和t，s不是0，并且s的所有出现均排列在所有的t的前面。
例如，44444411是二段数（s是4，t是1），41、10000000和5555556也是。但4444114和44444都不是二段数。

这时老师问小乐乐：给你一个任意的正整数n，你能求出比n大并且是n的倍数的最小二段数吗？请你帮助小乐乐解答这个问题。

输入描述:
多组输入，每组输入包含一个正整数n (1 ≤ n ≤ 99999)

题目保证测试数据总数不超过500组，当输入n=0时程序结束。
输出描述:
对于每组测试用例，输出正整数n，后面紧跟“: ”，输出答案并换行，即比n大且是n的倍数的最小二段数。
示例1
输入
1
2019
0
输出
1: 10
2019: 9999999993
 */
public class Bc120 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
        ArrayList<Integer> arr = new ArrayList<>();
        int temp;
        while (true) {
            temp = sc.nextInt();
            if (temp == 0) {
                break;
            } else {
                arr.add(temp);
            }
        }
        for (Integer o : arr) {
            printMinDoubleNumber(o);
        }
    }
 
    public static void printMinDoubleNumber(int number) {
        long temp = number;
        while (true) {
            if (isMinDoubleNumber(temp)) {
                System.out.println(number + ": " + temp);
                return;
            }
            temp += number;
        }
    }
 
    public static boolean isMinDoubleNumber(long number) {
        if (number < 10) {
            return false;
        }
        long temp;
        long preTemp = number % 10;
        int count = 1;
        number /= 10;
        while (number > 0) {
            if (count > 2) return false;
            temp = number % 10;
            if (temp != preTemp) {
                count++;
            }
            preTemp = temp;
            number /= 10;
        }
 
        if (count == 2) {
            return true;
        }else {
            return false;
        }

	}

}
