/**
 * 
 */
package com.nowcoder.bc;

import java.util.ArrayList;
import java.util.Scanner;

/**
 * @author 15159
 *题目描述
KiKi学习了结构体和指针，他了解了结构体类型可以定义包含多个不同类型成员，而指针本质是内存地址，是引用数据的另外一种方式。
现在他想将多个输入的数据通过结构体和指针的方式连接在一起，形成一个单向链表，
即：每个结点是结构体类型，包括整型数据成员（data）和结构体指针类型成员（next），每个结点的指针部分指向下一个输入的结点。
具体建立过程如下：先输入n个整数，按照数据输入的顺序建立一个带头结点的单链表，再输入一个数据m,将单链表中的值为m的结点全部删除。
输出删除后的单链表信息。
输入描述:
包括三行：
第一行输入数据个数n (3≤n≤100);
第二行依次输入n个整数，用空格分隔;
第三行输入欲删除数据m。
输出描述:
包括两行：
第一行输出完成删除后的单链表长度；
第二行依次输出完成删除后的单链表数据。
示例1
输入
5
1 2 2 3 4
2
输出
3
1 3 4
 */
public class Bc138 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		ArrayList<Integer> list = new ArrayList<>();
        Scanner sc = new Scanner(System.in);
        //输入需要输入数字个总个数
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            list.add(sc.nextInt());
        }
 
        //输入删除的数字
        int m = sc.nextInt();
        //循环遍历集合中的数字
        for (int index = 0; index < list.size(); ) {
            if(m == list.get(index)){
                list.remove(list.get(index));
            //如果集合里面有和输入的数字相同就减去。集合索引不增加
            }else{
            //如果集合里面没有相同数字，不进行操作，增加索引值。
                index++;
            }
        }
        //打印输出删除后集合的长度
        System.out.println(list.size());
        //将集合转换为数组，用于遍历
        Object[] obj = list.toArray();
        for (int i = 0; i < obj.length; i++) {
            if(i != obj.length){
                System.out.print(obj[i]+" ");
            }else{
                System.out.print(obj[i]);
            }
 
        }

	}

}
